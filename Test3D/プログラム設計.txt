カメラにはあらかじめUI用のシェーダを読み込ませておく
UICanvasと言うクラスを作り、その中でUIの表示を実装する
カメラにはDrawCanvas関数を作り、キャンパスを表示させる
シェーダーに関しては１オブジェクト１シェーダーで実装する

描画の順番
・カメラパラメータの計算、転送
・独自スクリーンの描画（モデル表示）
・キャンパスの描画（UI表示）

描画に関して
・すべての描画するべきオブジェクトはGLES20Utilクラスのdraw形メソッドを使う
・CanvasやCamera等はあくまでラッパークラスとして機能する（よって直接drawを使って描画できる）

カメラに関して
・カメラは内部にUI表示用の情報を内包する

シェーダに関して
シェーダーはShaderクラスを基底クラスとする派生クラスを作る。
シェーダークラス群はInitShaderでシェーダーをコンパイル。
SetShaderでプログラムオブジェクトを登録する。
同じシェーダーは複数個インスタンス化することはできない。（する必要も無い為）
インスタンス化にはファクトリメソッドを使用する。
ただしCustomShaderのみ複数個のインスタンス化を許可する
デフォルトで用意するシェーダは以下の三つ
・DiffuseShader
　　光を意識しない3D用のシェーダ。ディフューズ値をそのまま表示する。
・LightedShader
　　光を加味した3D用シェーダ。平行ライト、アンビエント光をサポート。それぞれ一つづつ。
・UIShader
　　UI表示用の2Dシェーダ。光は加味しない。テクスチャの値をそのまま表示する。
GLES20Utilには現在のシェーダーを保持する変数を持つ。これによって現在のシェーダーが何なのかを知る事が出来る。
